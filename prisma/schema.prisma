generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String  @id @default(cuid())
  fullname       String?
  username       String? @unique
  email          String  @unique
  gender         String?
  dateOfBirth    String?
  state          String?
  mobileNumber   String?
  religion       String?
  passport       String?
  role           Role    @default(USER)
  matricNumber   String? @unique
  department     String?
  level          String?
  modeOfEntry    String?
  contactAddress String?

  displayName         String?
  displayPicture      String?
  displayMobileNumber String?
  displayAddress      String?

  latitude  Float?
  longitude Float?
  lastSeen  DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  alerts   Alert[]
  reports  Report[]

  chatParticipants ChatParticipant[]
  sentMessages     Message[]

  // Emergency contacts
  emergencyContacts EmergencyContact[] @relation("UserEmergencyContacts")
  contactOf         EmergencyContact[] @relation("EmergencyContactUser")

  // Alerts
  // sentAlerts     Alert[] @relation("AlertSender")
  // receivedAlerts Alert[] @relation("AlertReceiver")

  @@map("users")
}

model Chat {
  id          String   @id @default(cuid())
  type        ChatType @default(DIRECT)
  name        String? // For group chats
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id       String    @id @default(cuid())
  userId   String
  chatId   String
  role     ChatRole  @default(MEMBER)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  chatId    String
  senderId  String
  replyToId String?
  editedAt  DateTime?
  deletedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  chat    Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender  User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo Message?  @relation("MessageReply", fields: [replyToId], references: [id])
  replies Message[] @relation("MessageReply")

  readReceipts MessageReadReceipt[]
  reactions    MessageReaction[]
  attachments  MessageAttachment[]

  @@map("messages")
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model MessageAttachment {
  id        String         @id @default(cuid())
  messageId String
  type      AttachmentType
  url       String
  filename  String
  size      Int?
  mimeType  String?
  createdAt DateTime       @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_attachments")
}

model EmergencyContact {
  id        String   @id @default(cuid())
  userId    String
  contactId String
  createdAt DateTime @default(now())

  user    User @relation("UserEmergencyContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact User @relation("EmergencyContactUser", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
  @@map("emergency_contacts")
}

model Alert {
  id              String      @id @default(cuid())
  type            AlertType
  userId          String
  location        String?
  latitude        Float
  longitude       Float
  audioUrl        String?
  audioTranscript String?
  urgencyScore    Float       @default(0.5)
  aiAnalysis      String?
  description     String?
  status          AlertStatus @default(ACTIVE)
  priority        Priority    @default(MEDIUM)
  blockchainTxId  String?

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  user          User           @relation(fields: [userId], references: [id])
  notifications Notification[]

  @@map("alerts")
}

model Report {
  id          String       @id @default(cuid())
  userId      String?
  latitude    Float
  longitude   Float
  description String
  category    String
  severity    Severity     @default(LOW)
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  alertId   String
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  alert Alert @relation(fields: [alertId], references: [id])
}

model IoTDevice {
  id          String    @id @default(cuid())
  deviceId    String    @unique
  name        String
  latitude    Float
  longitude   Float
  isActive    Boolean   @default(true)
  lastTrigger DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  CANCELLED
  FALSE_ALARM
}

enum ReportStatus {
  PENDING
  INVESTIGATING
  RESOLVED
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ChatType {
  DIRECT
  GROUP
  EMERGENCY
}

enum ChatRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  LOCATION
  SYSTEM
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum AlertType {
  EMERGENCY
  SECURITY
  MEDICAL
  FIRE
  ROBBERY
  ACCIDENT
  OTHER
}

enum IncidentType {
  ROBBERY
  ACCIDENT
  MEDICAL
  FIRE
  SECURITY
  OTHER
}

enum IncidentStatus {
  REPORTED
  INVESTIGATING
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
